
Sidharth Bambah
UID: 904 787 435

In order to begin this lab, I downloaded all of the files provided on CCLE.

After doing so, I extracted the files and placed them in an accessible location
in the linux SEASNET server.

First, I compiled the program normally using the command:
	make seq GPROF=1
the flag GPROF=1 creates a file gprof.out when the program is run.

I ran the compiled program using ./seq. This resulted in the output:
FUNC TIME : 0.542458
TOTAL TIME : 2.365232
and the file gprof.out was created.

Next, I ran the command: gprof seq | less in order to generated some output that
would indicate the portions of the program that were run the most and needed to be
sped up.
This command showed that the function func1 took approximately 65.54% of the running time
and the function rand2 took 20.03% of the entire running time.
These numbers were derived based on the following output:
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 65.54      0.36     0.36       15    24.03    25.43  func1
 20.03      0.47     0.11  5177344     0.00     0.00  rand2
  3.64      0.49     0.02        1    20.03   109.26  addSeed
  3.64      0.51     0.02                             filter
  3.64      0.53     0.02                             sequence
  1.82      0.54     0.01       15     0.67     0.67  func5
  1.82      0.55     0.01        1    10.01    10.01  imdilateDisk
  0.00      0.55     0.00   983042     0.00     0.00  round
  0.00      0.55     0.00   491520     0.00     0.00  findIndexBin
  0.00      0.55     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.55     0.00       15     0.00     0.00  func2
  0.00      0.55     0.00       15     0.00     0.00  func3
  0.00      0.55     0.00       15     0.00     0.00  func4
  0.00      0.55     0.00       15     0.00     0.00  rand1
  0.00      0.55     0.00        2     0.00     0.00  get_time
  0.00      0.55     0.00        1     0.00     0.00  elapsed_time
  0.00      0.55     0.00        1     0.00     0.00  fillMatrix
  0.00      0.55     0.00        1     0.00     0.00  func0
  0.00      0.55     0.00        1     0.00     0.00  getNeighbors

In order to achieve speedup, I inserted preproccessor directives of the form
#pragma omp parallel for num_threads(//my defined #) firstprivate(//vars) private(//indexes)
in order to designate the number of threads and the variables that need to be shared

Then, to check that the output remained correct, I ran the command:
make check
after compiling with every change that I made.
This gave the output:
gcc -o omp  -O3 -fopenmp filter.c main.c func.c util.c -lm
cp omp filter
./filter
FUNC TIME : 0.054654
TOTAL TIME : 2.068766
diff --brief correct.txt output.txt

The output suggests that there is no mistake between the correct.txt and output.txt files.


Then, I ran the omp compiled program and checked that the program was sped up to a suitable
degree.

Finally, I checked for memory leaks using the following commands:
make omp MTRACE=1
make checkmem

This command resulted in memory leaks; however, I believe that these leaks are from the OpenMP software as no additional
memory was allocated at all in the func.c files.

The output of this command was:


Before each compilation, I ran the command 'make clean' in order to prevent any lingering files
from corrupting the compilation.